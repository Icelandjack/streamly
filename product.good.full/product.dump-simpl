
==================== Tidy Core ====================
2020-07-01 20:53:33.36648 UTC

Result size of Tidy Core
  = {terms: 144, types: 188, coercions: 31, joins: 2/2}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl6_rlrA :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl6_rlrA = GHC.Types.I# 1#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl7_rlrB :: (Int, Int)
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl7_rlrB = (lvl6_rlrA, lvl6_rlrA)

Rec {
-- RHS size: {terms: 59, types: 52, coercions: 0, joins: 2/2}
Main.$wgo [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
Main.$wgo
  = \ (ww_sllq :: GHC.Prim.Int#)
      (w_slln :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case GHC.Prim.<=# ww_sllq 0# of {
        __DEFAULT ->
          case System.Random.$fRandomInt3 lvl7_rlrB w_slln of
          { (# ipv_ajT5, ipv1_ajT6 #) ->
          case ipv1_ajT6 of { GHC.Types.I# ww2_sllj ->
          join {
            exit_XU [Dmd=<C(S),C(U(U,U))>]
              :: GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
            [LclId[JoinId(1)], Arity=1, Str=<L,U>]
            exit_XU (w1_sllc [OS=OneShot]
                       :: GHC.Prim.State# GHC.Prim.RealWorld)
              = Main.$wgo (GHC.Prim.-# ww_sllq 1#) w1_sllc } in
          case GHC.Prim.># ww2_sllj (GHC.Prim.+# ww2_sllj 100000#) of {
            __DEFAULT ->
              joinrec {
                $s$wgo_sloW [Occ=LoopBreaker]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> GHC.Prim.Int# -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId[JoinId(2)], Arity=2, Str=<L,U><L,U>, Unf=OtherCon []]
                $s$wgo_sloW (sc_sloV :: GHC.Prim.State# GHC.Prim.RealWorld)
                            (sc1_sloU :: GHC.Prim.Int#)
                  = case GHC.Prim.># sc1_sloU (GHC.Prim.+# ww2_sllj 100000#) of {
                      __DEFAULT -> jump $s$wgo_sloW sc_sloV (GHC.Prim.+# sc1_sloU 1#);
                      1# -> jump exit_XU sc_sloV
                    }; } in
              jump $s$wgo_sloW ipv_ajT5 (GHC.Prim.+# ww2_sllj 1#);
            1# -> jump exit_XU ipv_ajT5
          }
          }
          };
        1# -> (# w_slln, GHC.Tuple.() #)
      }
end Rec }

-- RHS size: {terms: 8, types: 5, coercions: 0, joins: 0/0}
Main.main6 [InlPrag=NOUSERINLINE[2]]
  :: GHC.Int.Int64
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Str=<S,1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sllm [Occ=Once!] :: GHC.Int.Int64)
                 (w1_slln [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w_sllm of { GHC.Int.I64# ww1_sllq [Occ=Once] ->
                 Main.$wgo ww1_sllq w1_slln
                 }}]
Main.main6
  = \ (w_sllm :: GHC.Int.Int64)
      (w1_slln :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case w_sllm of { GHC.Int.I64# ww1_sllq ->
      Main.$wgo ww1_sllq w1_slln
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.main11 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Main.main11 = "product"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.main10 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.main10 = GHC.CString.unpackCString# Main.main11

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Main.main9 :: () -> ()
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U()>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (ds_ajQv [Occ=Once] :: ()) -> ds_ajQv}]
Main.main9 = \ (ds_ajQv :: ()) -> ds_ajQv

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
Main.main8
  :: GHC.Int.Int64
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (eta_X1a [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta_X1a, GHC.Tuple.() #)}]
Main.main8
  = \ _ [Occ=Dead] (eta_X1a :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      (# eta_X1a, GHC.Tuple.() #)

-- RHS size: {terms: 6, types: 11, coercions: 0, joins: 0/0}
Main.main7
  :: GHC.Int.Int64
     -> ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 _ [Occ=Dead]
                 (eta1_X2n [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1_X2n, GHC.Tuple.() #)}]
Main.main7
  = \ _ [Occ=Dead]
      _ [Occ=Dead]
      (eta1_X2n :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      (# eta1_X2n, GHC.Tuple.() #)

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
Main.main5
  :: ()
     -> GHC.Int.Int64
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Str=<L,A><S,1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (eta_X1d [Occ=Once] :: GHC.Int.Int64)
                 (eta1_X2p [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Main.main6 eta_X1d eta1_X2p}]
Main.main5
  = \ _ [Occ=Dead]
      (eta_X1d :: GHC.Int.Int64)
      (eta1_X2p :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      Main.main6 eta_X1d eta1_X2p

-- RHS size: {terms: 6, types: 1, coercions: 22, joins: 0/0}
Main.main4 :: Benchmarkable
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 60}]
Main.main4
  = Gauge.Benchmark.Benchmarkable
      @ ()
      (Main.main9
       `cast` (Sym (Control.DeepSeq.N:NFData[0] <()>_N)
               :: (() -> ()) ~R# NFData ()))
      (Main.main8
       `cast` (<GHC.Int.Int64>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (GHC.Int.Int64
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                  ~R# (GHC.Int.Int64 -> IO ())))
      (Main.main7
       `cast` (<GHC.Int.Int64>_R
               ->_R <()>_R
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (GHC.Int.Int64
                   -> ()
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                  ~R# (GHC.Int.Int64 -> () -> IO ())))
      (Main.main5
       `cast` (<()>_R
               ->_R <GHC.Int.Int64>_R
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (()
                   -> GHC.Int.Int64
                   -> GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                  ~R# (() -> GHC.Int.Int64 -> IO ())))
      GHC.Types.False

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.main3 :: Benchmark
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.main3 = Gauge.Benchmark.Benchmark Main.main10 Main.main4

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Main.main2 :: [Benchmark]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.main2
  = GHC.Types.: @ Benchmark Main.main3 (GHC.Types.[] @ Benchmark)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.main1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
Main.main1 = Gauge.Main.defaultMain2 defaultConfig Main.main2

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[GblId,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.main1
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                          ~R# IO ())}]
main
  = Main.main1
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
Main.main12
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Main.main12
  = GHC.TopHandler.runMainIO1
      @ ()
      (Main.main1
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[GblId,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.main12
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                          ~R# IO ())}]
:Main.main
  = Main.main12
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# IO ())

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.$trModule3 = GHC.Types.TrNameS Main.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.$trModule2 = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.$trModule1 = GHC.Types.TrNameS Main.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule = GHC.Types.Module Main.$trModule3 Main.$trModule1


