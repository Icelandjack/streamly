
==================== Tidy Core ====================

Result size of Tidy Core
  = {terms: 148, types: 178, coercions: 31, joins: 1/1}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl6_rlup = I# 1#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl7_rluq = (lvl6_rlup, lvl6_rlup)

Rec {
-- RHS size: {terms: 63, types: 42, coercions: 0, joins: 1/1}
$wgo
  = \ ww_sll6 w_sll3 ->
      case <=# ww_sll6 0# of {
        __DEFAULT ->
          case $fRandomInt3 lvl7_rluq w_sll3 of
          { (# ipv_ajT5, ipv1_ajT6 #) ->
          case ipv1_ajT6 of { I# ww2_slkM ->
          case ># ww2_slkM (+# ww2_slkM 100000#) of {
            __DEFAULT ->
              joinrec {
                $s$wgo_slqH sc_slqG sc1_slqF sc2_slqE
                  = case ># sc1_slqF (+# ww2_slkM 100000#) of {
                      __DEFAULT ->
                        jump $s$wgo_slqH sc_slqG (+# sc1_slqF 1#) (*# sc2_slqE sc1_slqF);
                      1# -> $wgo (-# ww_sll6 1#) sc_slqG
                    }; } in
              jump $s$wgo_slqH ipv_ajT5 (+# ww2_slkM 1#) ww2_slkM;
            1# -> $wgo (-# ww_sll6 1#) ipv_ajT5
          }
          }
          };
        1# -> (# w_sll3, () #)
      }
end Rec }

-- RHS size: {terms: 8, types: 5, coercions: 0, joins: 0/0}
main6
  = \ w_sll2 w1_sll3 ->
      case w_sll2 of { I64# ww1_sll6 -> $wgo ww1_sll6 w1_sll3 }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
main11 = "product"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
main10 = unpackCString# main11

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
main9 = \ ds_ajQv -> ds_ajQv

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
main8 = \ _ eta_X1c -> (# eta_X1c, () #)

-- RHS size: {terms: 6, types: 11, coercions: 0, joins: 0/0}
main7 = \ _ _ eta1_X2r -> (# eta1_X2r, () #)

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
main5 = \ _ eta_X1f eta1_X2t -> main6 eta_X1f eta1_X2t

-- RHS size: {terms: 6, types: 1, coercions: 22, joins: 0/0}
main4
  = Benchmarkable
      (main9 `cast` <Co:3>)
      (main8 `cast` <Co:5>)
      (main7 `cast` <Co:7>)
      (main5 `cast` <Co:7>)
      False

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
main3 = Benchmark main10 main4

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
main2 = : main3 []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
main1 = defaultMain2 defaultConfig main2

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main = main1 `cast` <Co:3>

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main12 = runMainIO1 (main1 `cast` <Co:3>)

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main = main12 `cast` <Co:3>

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1


